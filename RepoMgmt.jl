# Module for using/ dealing with repo metadata
# TODO probably rename

module RepoMgmt

using DataFrames
using JSON

export incol, reduce_dates, multivalue_entries, find_dependents
###
### Conversion
###

"""Reads in json saved from Mongo.

This json is generated by saving output of script `get_julia_repos.js` on the GHTorrent Mongo server."""
function read_json(file_path)
  output = []
  f = open(file_path)
  while !eof(f)
    push!(output, JSON.parse(f))
  end
  close(f)
  filter!(x->x!=nothing, output)
end


"""Reads json from Mongo into a dataframe"""
function json2df(raw_metadata)
  df = DataFrame()
  for k in keys(raw_metadata[1])
    df[symbol(k)] = map(x->x[k], raw_metadata)
  end
  df
end
function json2df(raw_metadata, keys::Array)#TODO set default keys + a way to just get all of them, I guess I could provide keys(raw_metadata[1])
  df = DataFrame()
  for k in keys
    df[symbol(k)] = map(x->x[k], raw_metadata)
  end
  df
end

"""Convert a dataframe to an array of OrderedDicts. Trivialy extensible to write to JSON.

`df2dict(df)`
"""
function df2dict(in_df::AbstractDataFrame, ks)
    n = size(in_df)[1]
    out = fill(OrderedDict(), n)
    for i in 1:n
        for k in ks
            s = string(k)
            out[i][s] = in_df[i, k]
        end
    end
    out
end
function df2dict(in_df::DataFrame)
    ks = in_df.colindex.names
    invoke(df2dict, (AbstractDataFrame, Any), in_df, ks)
end
function df2dict(in_df::SubDataFrame)
    ks = in_df.parent.colindex.names
    invoke(df2dict, (AbstractDataFrame, Any), in_df, ks)
end

###
### Operations on entries in a dataframe
###
"""Given a GitHub formatted date time, convert it to more useful datatime"""
function todt(entry::AbstractString)
  if entry[end] == 'Z'
    entry = entry[1:end-1]
  end
  DateTime(entry)
end

"""Returns dataframe whose values of specified column are in passed array.

incol(df, :col, array)
"""
incol(df::AbstractDataFrame, col::Symbol, arr::AbstractArray) = df[findin(df[col], arr), :]

"""Collect entries by column value then reduce those entries to have same date.

Previously called `group_by_dates`.
"""
function reduce_dates(df, unique_col::Symbol=:id; min_creation::Bool=false)
  by(df, unique_col) do subdf
    ma = maximum(subdf[:pushed_at]) # Find latest date pushed
    outdf = subdf[subdf[:pushed_at] .== ma ,:][1,:] # Return entry with latest date pushed
    if min_creation
      # Fair to do by :id, probably not by other values
      outdf[:created_at] = minimum(subdf[:created_at])
    end
    outdf
  end
end

"""Group a dataframe and figure out which columns in sub-dataframes have
multiple entry values."""
function multivalue_entries(df, column)
    cols = df.colindex.names
    weirdos = []
    for subdf in groupby(df, column)
        if size(subdf)[1] > 1
            append!(weirdos, subdf[:id])
        end
    end
    weirdos
end

"""Returns registered packages which are dependents of passed package name, then recurses on them"""
function find_dependents(p_name, deps = OrderedDict())
    deps[p_name] = Dict()
    dependents = Pkg.dependents(p_name)
    deps[p_name]["dependents"] = dependents
    next = setdiff(Pkg.dependents(p_name), deps.keys )
    for i in next
        find_dependents(i, deps)
    end
    deps
end

end
